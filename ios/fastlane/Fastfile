fastlane_version "2.69.2"

default_platform :ios

project_name = "STQ-Test"
scheme = project_name
path = "./#{project_name}.xcodeproj"

platform :ios do

  before_all do
  end

  desc "Build Release"
  lane :build do
    gym(
      scheme: scheme,
      workspace: "./#{project_name}.xcworkspace",
      output_directory: "ios/build",
      configuration: "Release",
      export_method: "app-store"
    )
  end

  desc "Bump version number"
  lane :bump_version do
    increment_build_number(xcodeproj: path)
  end

  desc "Tag current version and push to GitHub"
  lane :tag_version do
    version = get_version_number(xcodeproj: path)
    build = get_build_number(xcodeproj: path)
    sh "git checkout master"
    git_pull
    commit_version_bump(
      force: true,
      xcodeproj: path,
      message: "Version #{version} (build #{build}) [bitrise-ios] [skip ci]"
    )
    add_git_tag(
      tag: "v#{version}-#{build}-ios"
    )
    push_to_git_remote(
      remote_branch: "master",
      tags: true,
      force: true
    )
    slack(
      message: "Successfully uploaded #{version} (build #{build}) to TestFlight"
    )
  end

  desc "Bitrise build to TestFlight"
  lane :bitrise do
    if ENV["BUILD_IOS"] != "1"
      UI.important 'Skipping build'
      next
    end
    match(
      type: "appstore",
      readonly: true
    )
    bump_version
    build
    testflight(
      skip_waiting_for_build_processing: true
    )
    tag_version
  end

  desc "Travis build to TestFlight"
  lane :travis do
    create_keychain(
      name: "ios-build.keychain-db",
      password: ENV["MATCH_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    )
    match(
      type: "appstore",
      keychain_name: "ios-build.keychain-db",
      keychain_password: ENV["MATCH_PASSWORD"],
      readonly: true
    )
    bump_version
    build
    testflight(
      skip_waiting_for_build_processing: true
    )
    tag_version
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
  end

  error do |lane, exception|
  end

end
